/*
Kowabunga API

Testing VnetAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package kowabunga

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	
)

func Test_kowabunga_VnetAPIService(t *testing.T) {

	configuration := NewConfiguration()
	apiClient := NewAPIClient(configuration)

	t.Run("Test VnetAPIService CreateSubnet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var vnetId string

		resp, httpRes, err := apiClient.VnetAPI.CreateSubnet(context.Background(), vnetId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VnetAPIService DeleteVNet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var vnetId string

		httpRes, err := apiClient.VnetAPI.DeleteVNet(context.Background(), vnetId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VnetAPIService ListVNetSubnets", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var vnetId string

		resp, httpRes, err := apiClient.VnetAPI.ListVNetSubnets(context.Background(), vnetId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VnetAPIService ListVNets", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.VnetAPI.ListVNets(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VnetAPIService ReadVNet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var vnetId string

		resp, httpRes, err := apiClient.VnetAPI.ReadVNet(context.Background(), vnetId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VnetAPIService SetVNetDefaultSubnet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var vnetId string
		var subnetId string

		httpRes, err := apiClient.VnetAPI.SetVNetDefaultSubnet(context.Background(), vnetId, subnetId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VnetAPIService UpdateVNet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var vnetId string

		resp, httpRes, err := apiClient.VnetAPI.UpdateVNet(context.Background(), vnetId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
