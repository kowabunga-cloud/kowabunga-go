/*
Kowabunga API documentation

Kvm Orchestrator With A BUNch of Goods Added

API version: 0.52.5
Contact: maintainers@kowabunga.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kowabunga

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the KaktusCPU type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &KaktusCPU{}

// KaktusCPU A Kaktus computing node CPU characteristics.
type KaktusCPU struct {
	// The Kaktus computing node CPU architecture.
	Arch string `json:"arch"`
	// The Kaktus computing node CPU model.
	Model string `json:"model"`
	// The Kaktus computing node CPU vendor.
	Vendor string `json:"vendor"`
	// The Kaktus computing node CPU number of sockets.
	Sockets int64 `json:"sockets"`
	// The Kaktus computing node CPU number of cores.
	Cores int64 `json:"cores"`
	// The Kaktus computing node CPU number of threads.
	Threads int64 `json:"threads"`
}

type _KaktusCPU KaktusCPU

// NewKaktusCPU instantiates a new KaktusCPU object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKaktusCPU(arch string, model string, vendor string, sockets int64, cores int64, threads int64) *KaktusCPU {
	this := KaktusCPU{}
	this.Arch = arch
	this.Model = model
	this.Vendor = vendor
	this.Sockets = sockets
	this.Cores = cores
	this.Threads = threads
	return &this
}

// NewKaktusCPUWithDefaults instantiates a new KaktusCPU object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKaktusCPUWithDefaults() *KaktusCPU {
	this := KaktusCPU{}
	return &this
}

// GetArch returns the Arch field value
func (o *KaktusCPU) GetArch() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Arch
}

// GetArchOk returns a tuple with the Arch field value
// and a boolean to check if the value has been set.
func (o *KaktusCPU) GetArchOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Arch, true
}

// SetArch sets field value
func (o *KaktusCPU) SetArch(v string) {
	o.Arch = v
}

// GetModel returns the Model field value
func (o *KaktusCPU) GetModel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Model
}

// GetModelOk returns a tuple with the Model field value
// and a boolean to check if the value has been set.
func (o *KaktusCPU) GetModelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Model, true
}

// SetModel sets field value
func (o *KaktusCPU) SetModel(v string) {
	o.Model = v
}

// GetVendor returns the Vendor field value
func (o *KaktusCPU) GetVendor() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Vendor
}

// GetVendorOk returns a tuple with the Vendor field value
// and a boolean to check if the value has been set.
func (o *KaktusCPU) GetVendorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Vendor, true
}

// SetVendor sets field value
func (o *KaktusCPU) SetVendor(v string) {
	o.Vendor = v
}

// GetSockets returns the Sockets field value
func (o *KaktusCPU) GetSockets() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Sockets
}

// GetSocketsOk returns a tuple with the Sockets field value
// and a boolean to check if the value has been set.
func (o *KaktusCPU) GetSocketsOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Sockets, true
}

// SetSockets sets field value
func (o *KaktusCPU) SetSockets(v int64) {
	o.Sockets = v
}

// GetCores returns the Cores field value
func (o *KaktusCPU) GetCores() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Cores
}

// GetCoresOk returns a tuple with the Cores field value
// and a boolean to check if the value has been set.
func (o *KaktusCPU) GetCoresOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Cores, true
}

// SetCores sets field value
func (o *KaktusCPU) SetCores(v int64) {
	o.Cores = v
}

// GetThreads returns the Threads field value
func (o *KaktusCPU) GetThreads() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Threads
}

// GetThreadsOk returns a tuple with the Threads field value
// and a boolean to check if the value has been set.
func (o *KaktusCPU) GetThreadsOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Threads, true
}

// SetThreads sets field value
func (o *KaktusCPU) SetThreads(v int64) {
	o.Threads = v
}

func (o KaktusCPU) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o KaktusCPU) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["arch"] = o.Arch
	toSerialize["model"] = o.Model
	toSerialize["vendor"] = o.Vendor
	toSerialize["sockets"] = o.Sockets
	toSerialize["cores"] = o.Cores
	toSerialize["threads"] = o.Threads
	return toSerialize, nil
}

func (o *KaktusCPU) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"arch",
		"model",
		"vendor",
		"sockets",
		"cores",
		"threads",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varKaktusCPU := _KaktusCPU{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varKaktusCPU)

	if err != nil {
		return err
	}

	*o = KaktusCPU(varKaktusCPU)

	return err
}

type NullableKaktusCPU struct {
	value *KaktusCPU
	isSet bool
}

func (v NullableKaktusCPU) Get() *KaktusCPU {
	return v.value
}

func (v *NullableKaktusCPU) Set(val *KaktusCPU) {
	v.value = val
	v.isSet = true
}

func (v NullableKaktusCPU) IsSet() bool {
	return v.isSet
}

func (v *NullableKaktusCPU) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKaktusCPU(val *KaktusCPU) *NullableKaktusCPU {
	return &NullableKaktusCPU{value: val, isSet: true}
}

func (v NullableKaktusCPU) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKaktusCPU) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


