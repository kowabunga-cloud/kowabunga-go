/*
Kowabunga API documentation

Kvm Orchestrator With A BUNch of Goods Added

API version: 0.52.5
Contact: maintainers@kowabunga.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kowabunga

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ApiErrorBadRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApiErrorBadRequest{}

// ApiErrorBadRequest struct for ApiErrorBadRequest
type ApiErrorBadRequest struct {
	Status int32 `json:"status"`
	Error string `json:"error"`
	Reason string `json:"reason"`
}

type _ApiErrorBadRequest ApiErrorBadRequest

// NewApiErrorBadRequest instantiates a new ApiErrorBadRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiErrorBadRequest(status int32, error_ string, reason string) *ApiErrorBadRequest {
	this := ApiErrorBadRequest{}
	this.Status = status
	this.Error = error_
	this.Reason = reason
	return &this
}

// NewApiErrorBadRequestWithDefaults instantiates a new ApiErrorBadRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiErrorBadRequestWithDefaults() *ApiErrorBadRequest {
	this := ApiErrorBadRequest{}
	return &this
}

// GetStatus returns the Status field value
func (o *ApiErrorBadRequest) GetStatus() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *ApiErrorBadRequest) GetStatusOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *ApiErrorBadRequest) SetStatus(v int32) {
	o.Status = v
}

// GetError returns the Error field value
func (o *ApiErrorBadRequest) GetError() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Error
}

// GetErrorOk returns a tuple with the Error field value
// and a boolean to check if the value has been set.
func (o *ApiErrorBadRequest) GetErrorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Error, true
}

// SetError sets field value
func (o *ApiErrorBadRequest) SetError(v string) {
	o.Error = v
}

// GetReason returns the Reason field value
func (o *ApiErrorBadRequest) GetReason() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Reason
}

// GetReasonOk returns a tuple with the Reason field value
// and a boolean to check if the value has been set.
func (o *ApiErrorBadRequest) GetReasonOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Reason, true
}

// SetReason sets field value
func (o *ApiErrorBadRequest) SetReason(v string) {
	o.Reason = v
}

func (o ApiErrorBadRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApiErrorBadRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["status"] = o.Status
	toSerialize["error"] = o.Error
	toSerialize["reason"] = o.Reason
	return toSerialize, nil
}

func (o *ApiErrorBadRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"status",
		"error",
		"reason",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varApiErrorBadRequest := _ApiErrorBadRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varApiErrorBadRequest)

	if err != nil {
		return err
	}

	*o = ApiErrorBadRequest(varApiErrorBadRequest)

	return err
}

type NullableApiErrorBadRequest struct {
	value *ApiErrorBadRequest
	isSet bool
}

func (v NullableApiErrorBadRequest) Get() *ApiErrorBadRequest {
	return v.value
}

func (v *NullableApiErrorBadRequest) Set(val *ApiErrorBadRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableApiErrorBadRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableApiErrorBadRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiErrorBadRequest(val *ApiErrorBadRequest) *NullableApiErrorBadRequest {
	return &NullableApiErrorBadRequest{value: val, isSet: true}
}

func (v NullableApiErrorBadRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiErrorBadRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


