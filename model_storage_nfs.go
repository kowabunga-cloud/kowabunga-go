/*
Kowabunga API

Kvm Orchestrator With A BUNch of Goods Added

API version: 0.53.2
Contact: maintainers@kowabunga.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kowabunga

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the StorageNFS type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StorageNFS{}

// StorageNFS A NFS storage.
type StorageNFS struct {
	// The NFS storage ID (auto-generated).
	Id *string `json:"id,omitempty"`
	// The NFS storage name.
	Name string `json:"name"`
	// The NFS storage description.
	Description *string `json:"description,omitempty"`
	// The associated NFS endpoint FQDN.
	Endpoint string `json:"endpoint"`
	// The underlying associated Ceph volume name.
	Fs *string `json:"fs,omitempty"`
	// List of NFS Ganesha API server IP addresses.
	Backends []string `json:"backends,omitempty"`
	// NFS Ganesha API server port (default 54934).
	Port *int64 `json:"port,omitempty"`
}

type _StorageNFS StorageNFS

// NewStorageNFS instantiates a new StorageNFS object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStorageNFS(name string, endpoint string) *StorageNFS {
	this := StorageNFS{}
	this.Name = name
	this.Endpoint = endpoint
	var fs string = "nfs"
	this.Fs = &fs
	var port int64 = 54934
	this.Port = &port
	return &this
}

// NewStorageNFSWithDefaults instantiates a new StorageNFS object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStorageNFSWithDefaults() *StorageNFS {
	this := StorageNFS{}
	var fs string = "nfs"
	this.Fs = &fs
	var port int64 = 54934
	this.Port = &port
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *StorageNFS) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageNFS) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *StorageNFS) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *StorageNFS) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value
func (o *StorageNFS) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *StorageNFS) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *StorageNFS) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *StorageNFS) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageNFS) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *StorageNFS) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *StorageNFS) SetDescription(v string) {
	o.Description = &v
}

// GetEndpoint returns the Endpoint field value
func (o *StorageNFS) GetEndpoint() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Endpoint
}

// GetEndpointOk returns a tuple with the Endpoint field value
// and a boolean to check if the value has been set.
func (o *StorageNFS) GetEndpointOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Endpoint, true
}

// SetEndpoint sets field value
func (o *StorageNFS) SetEndpoint(v string) {
	o.Endpoint = v
}

// GetFs returns the Fs field value if set, zero value otherwise.
func (o *StorageNFS) GetFs() string {
	if o == nil || IsNil(o.Fs) {
		var ret string
		return ret
	}
	return *o.Fs
}

// GetFsOk returns a tuple with the Fs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageNFS) GetFsOk() (*string, bool) {
	if o == nil || IsNil(o.Fs) {
		return nil, false
	}
	return o.Fs, true
}

// HasFs returns a boolean if a field has been set.
func (o *StorageNFS) HasFs() bool {
	if o != nil && !IsNil(o.Fs) {
		return true
	}

	return false
}

// SetFs gets a reference to the given string and assigns it to the Fs field.
func (o *StorageNFS) SetFs(v string) {
	o.Fs = &v
}

// GetBackends returns the Backends field value if set, zero value otherwise.
func (o *StorageNFS) GetBackends() []string {
	if o == nil || IsNil(o.Backends) {
		var ret []string
		return ret
	}
	return o.Backends
}

// GetBackendsOk returns a tuple with the Backends field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageNFS) GetBackendsOk() ([]string, bool) {
	if o == nil || IsNil(o.Backends) {
		return nil, false
	}
	return o.Backends, true
}

// HasBackends returns a boolean if a field has been set.
func (o *StorageNFS) HasBackends() bool {
	if o != nil && !IsNil(o.Backends) {
		return true
	}

	return false
}

// SetBackends gets a reference to the given []string and assigns it to the Backends field.
func (o *StorageNFS) SetBackends(v []string) {
	o.Backends = v
}

// GetPort returns the Port field value if set, zero value otherwise.
func (o *StorageNFS) GetPort() int64 {
	if o == nil || IsNil(o.Port) {
		var ret int64
		return ret
	}
	return *o.Port
}

// GetPortOk returns a tuple with the Port field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageNFS) GetPortOk() (*int64, bool) {
	if o == nil || IsNil(o.Port) {
		return nil, false
	}
	return o.Port, true
}

// HasPort returns a boolean if a field has been set.
func (o *StorageNFS) HasPort() bool {
	if o != nil && !IsNil(o.Port) {
		return true
	}

	return false
}

// SetPort gets a reference to the given int64 and assigns it to the Port field.
func (o *StorageNFS) SetPort(v int64) {
	o.Port = &v
}

func (o StorageNFS) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StorageNFS) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["name"] = o.Name
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	toSerialize["endpoint"] = o.Endpoint
	if !IsNil(o.Fs) {
		toSerialize["fs"] = o.Fs
	}
	if !IsNil(o.Backends) {
		toSerialize["backends"] = o.Backends
	}
	if !IsNil(o.Port) {
		toSerialize["port"] = o.Port
	}
	return toSerialize, nil
}

func (o *StorageNFS) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"endpoint",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varStorageNFS := _StorageNFS{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varStorageNFS)

	if err != nil {
		return err
	}

	*o = StorageNFS(varStorageNFS)

	return err
}

type NullableStorageNFS struct {
	value *StorageNFS
	isSet bool
}

func (v NullableStorageNFS) Get() *StorageNFS {
	return v.value
}

func (v *NullableStorageNFS) Set(val *StorageNFS) {
	v.value = val
	v.isSet = true
}

func (v NullableStorageNFS) IsSet() bool {
	return v.isSet
}

func (v *NullableStorageNFS) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStorageNFS(val *StorageNFS) *NullableStorageNFS {
	return &NullableStorageNFS{value: val, isSet: true}
}

func (v NullableStorageNFS) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStorageNFS) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


