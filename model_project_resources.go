/*
Kowabunga API

Kvm Orchestrator With A BUNch of Goods Added

API version: 0.53.1
Contact: maintainers@kowabunga.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kowabunga

import (
	"encoding/json"
)

// checks if the ProjectResources type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProjectResources{}

// ProjectResources A global project resource quotas/usage (0 for unlimited).
type ProjectResources struct {
	// The maximum total number of vCPUs allowed to be consumed by sum of all instances.
	Vcpus *int32 `json:"vcpus,omitempty"`
	// The maximum total memory (in bytes) allowed to be consumed by sum of all instances.
	Memory *int64 `json:"memory,omitempty"`
	// The maximum total disk capacity allowed to be consumed by sum of all instances.
	Storage *int64 `json:"storage,omitempty"`
	// The maximum number of instances allowed to be spawned.
	Instances *int32 `json:"instances,omitempty"`
}

// NewProjectResources instantiates a new ProjectResources object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProjectResources() *ProjectResources {
	this := ProjectResources{}
	return &this
}

// NewProjectResourcesWithDefaults instantiates a new ProjectResources object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProjectResourcesWithDefaults() *ProjectResources {
	this := ProjectResources{}
	return &this
}

// GetVcpus returns the Vcpus field value if set, zero value otherwise.
func (o *ProjectResources) GetVcpus() int32 {
	if o == nil || IsNil(o.Vcpus) {
		var ret int32
		return ret
	}
	return *o.Vcpus
}

// GetVcpusOk returns a tuple with the Vcpus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectResources) GetVcpusOk() (*int32, bool) {
	if o == nil || IsNil(o.Vcpus) {
		return nil, false
	}
	return o.Vcpus, true
}

// HasVcpus returns a boolean if a field has been set.
func (o *ProjectResources) HasVcpus() bool {
	if o != nil && !IsNil(o.Vcpus) {
		return true
	}

	return false
}

// SetVcpus gets a reference to the given int32 and assigns it to the Vcpus field.
func (o *ProjectResources) SetVcpus(v int32) {
	o.Vcpus = &v
}

// GetMemory returns the Memory field value if set, zero value otherwise.
func (o *ProjectResources) GetMemory() int64 {
	if o == nil || IsNil(o.Memory) {
		var ret int64
		return ret
	}
	return *o.Memory
}

// GetMemoryOk returns a tuple with the Memory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectResources) GetMemoryOk() (*int64, bool) {
	if o == nil || IsNil(o.Memory) {
		return nil, false
	}
	return o.Memory, true
}

// HasMemory returns a boolean if a field has been set.
func (o *ProjectResources) HasMemory() bool {
	if o != nil && !IsNil(o.Memory) {
		return true
	}

	return false
}

// SetMemory gets a reference to the given int64 and assigns it to the Memory field.
func (o *ProjectResources) SetMemory(v int64) {
	o.Memory = &v
}

// GetStorage returns the Storage field value if set, zero value otherwise.
func (o *ProjectResources) GetStorage() int64 {
	if o == nil || IsNil(o.Storage) {
		var ret int64
		return ret
	}
	return *o.Storage
}

// GetStorageOk returns a tuple with the Storage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectResources) GetStorageOk() (*int64, bool) {
	if o == nil || IsNil(o.Storage) {
		return nil, false
	}
	return o.Storage, true
}

// HasStorage returns a boolean if a field has been set.
func (o *ProjectResources) HasStorage() bool {
	if o != nil && !IsNil(o.Storage) {
		return true
	}

	return false
}

// SetStorage gets a reference to the given int64 and assigns it to the Storage field.
func (o *ProjectResources) SetStorage(v int64) {
	o.Storage = &v
}

// GetInstances returns the Instances field value if set, zero value otherwise.
func (o *ProjectResources) GetInstances() int32 {
	if o == nil || IsNil(o.Instances) {
		var ret int32
		return ret
	}
	return *o.Instances
}

// GetInstancesOk returns a tuple with the Instances field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectResources) GetInstancesOk() (*int32, bool) {
	if o == nil || IsNil(o.Instances) {
		return nil, false
	}
	return o.Instances, true
}

// HasInstances returns a boolean if a field has been set.
func (o *ProjectResources) HasInstances() bool {
	if o != nil && !IsNil(o.Instances) {
		return true
	}

	return false
}

// SetInstances gets a reference to the given int32 and assigns it to the Instances field.
func (o *ProjectResources) SetInstances(v int32) {
	o.Instances = &v
}

func (o ProjectResources) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProjectResources) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Vcpus) {
		toSerialize["vcpus"] = o.Vcpus
	}
	if !IsNil(o.Memory) {
		toSerialize["memory"] = o.Memory
	}
	if !IsNil(o.Storage) {
		toSerialize["storage"] = o.Storage
	}
	if !IsNil(o.Instances) {
		toSerialize["instances"] = o.Instances
	}
	return toSerialize, nil
}

type NullableProjectResources struct {
	value *ProjectResources
	isSet bool
}

func (v NullableProjectResources) Get() *ProjectResources {
	return v.value
}

func (v *NullableProjectResources) Set(val *ProjectResources) {
	v.value = val
	v.isSet = true
}

func (v NullableProjectResources) IsSet() bool {
	return v.isSet
}

func (v *NullableProjectResources) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProjectResources(val *ProjectResources) *NullableProjectResources {
	return &NullableProjectResources{value: val, isSet: true}
}

func (v NullableProjectResources) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProjectResources) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


