/*
Kowabunga API

Kvm Orchestrator With A BUNch of Goods Added

API version: 0.53.1
Contact: maintainers@kowabunga.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kowabunga

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Kylo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Kylo{}

// Kylo A Kylo provides an elastic NFS-like remote storage volume.
type Kylo struct {
	// The Kylo ID (auto-generated).
	Id *string `json:"id,omitempty"`
	// The Kylo name.
	Name string `json:"name"`
	// The Kylo description.
	Description *string `json:"description,omitempty"`
	// The Kylo volume access type.
	Access *string `json:"access,omitempty"`
	// The Kylo NFS protocol versions to be supported.
	Protocols []int32 `json:"protocols,omitempty"`
	// The Kylo endpoint FQDN (read-only).
	Endpoint *string `json:"endpoint,omitempty"`
	// The Kylo volume bytes used (read-only).
	Size *int64 `json:"size,omitempty"`
}

type _Kylo Kylo

// NewKylo instantiates a new Kylo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKylo(name string) *Kylo {
	this := Kylo{}
	this.Name = name
	var access string = "RW"
	this.Access = &access
	return &this
}

// NewKyloWithDefaults instantiates a new Kylo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKyloWithDefaults() *Kylo {
	this := Kylo{}
	var access string = "RW"
	this.Access = &access
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Kylo) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Kylo) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Kylo) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Kylo) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value
func (o *Kylo) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Kylo) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Kylo) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *Kylo) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Kylo) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *Kylo) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *Kylo) SetDescription(v string) {
	o.Description = &v
}

// GetAccess returns the Access field value if set, zero value otherwise.
func (o *Kylo) GetAccess() string {
	if o == nil || IsNil(o.Access) {
		var ret string
		return ret
	}
	return *o.Access
}

// GetAccessOk returns a tuple with the Access field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Kylo) GetAccessOk() (*string, bool) {
	if o == nil || IsNil(o.Access) {
		return nil, false
	}
	return o.Access, true
}

// HasAccess returns a boolean if a field has been set.
func (o *Kylo) HasAccess() bool {
	if o != nil && !IsNil(o.Access) {
		return true
	}

	return false
}

// SetAccess gets a reference to the given string and assigns it to the Access field.
func (o *Kylo) SetAccess(v string) {
	o.Access = &v
}

// GetProtocols returns the Protocols field value if set, zero value otherwise.
func (o *Kylo) GetProtocols() []int32 {
	if o == nil || IsNil(o.Protocols) {
		var ret []int32
		return ret
	}
	return o.Protocols
}

// GetProtocolsOk returns a tuple with the Protocols field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Kylo) GetProtocolsOk() ([]int32, bool) {
	if o == nil || IsNil(o.Protocols) {
		return nil, false
	}
	return o.Protocols, true
}

// HasProtocols returns a boolean if a field has been set.
func (o *Kylo) HasProtocols() bool {
	if o != nil && !IsNil(o.Protocols) {
		return true
	}

	return false
}

// SetProtocols gets a reference to the given []int32 and assigns it to the Protocols field.
func (o *Kylo) SetProtocols(v []int32) {
	o.Protocols = v
}

// GetEndpoint returns the Endpoint field value if set, zero value otherwise.
func (o *Kylo) GetEndpoint() string {
	if o == nil || IsNil(o.Endpoint) {
		var ret string
		return ret
	}
	return *o.Endpoint
}

// GetEndpointOk returns a tuple with the Endpoint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Kylo) GetEndpointOk() (*string, bool) {
	if o == nil || IsNil(o.Endpoint) {
		return nil, false
	}
	return o.Endpoint, true
}

// HasEndpoint returns a boolean if a field has been set.
func (o *Kylo) HasEndpoint() bool {
	if o != nil && !IsNil(o.Endpoint) {
		return true
	}

	return false
}

// SetEndpoint gets a reference to the given string and assigns it to the Endpoint field.
func (o *Kylo) SetEndpoint(v string) {
	o.Endpoint = &v
}

// GetSize returns the Size field value if set, zero value otherwise.
func (o *Kylo) GetSize() int64 {
	if o == nil || IsNil(o.Size) {
		var ret int64
		return ret
	}
	return *o.Size
}

// GetSizeOk returns a tuple with the Size field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Kylo) GetSizeOk() (*int64, bool) {
	if o == nil || IsNil(o.Size) {
		return nil, false
	}
	return o.Size, true
}

// HasSize returns a boolean if a field has been set.
func (o *Kylo) HasSize() bool {
	if o != nil && !IsNil(o.Size) {
		return true
	}

	return false
}

// SetSize gets a reference to the given int64 and assigns it to the Size field.
func (o *Kylo) SetSize(v int64) {
	o.Size = &v
}

func (o Kylo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Kylo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["name"] = o.Name
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Access) {
		toSerialize["access"] = o.Access
	}
	if !IsNil(o.Protocols) {
		toSerialize["protocols"] = o.Protocols
	}
	if !IsNil(o.Endpoint) {
		toSerialize["endpoint"] = o.Endpoint
	}
	if !IsNil(o.Size) {
		toSerialize["size"] = o.Size
	}
	return toSerialize, nil
}

func (o *Kylo) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varKylo := _Kylo{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varKylo)

	if err != nil {
		return err
	}

	*o = Kylo(varKylo)

	return err
}

type NullableKylo struct {
	value *Kylo
	isSet bool
}

func (v NullableKylo) Get() *Kylo {
	return v.value
}

func (v *NullableKylo) Set(val *Kylo) {
	v.value = val
	v.isSet = true
}

func (v NullableKylo) IsSet() bool {
	return v.isSet
}

func (v *NullableKylo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKylo(val *Kylo) *NullableKylo {
	return &NullableKylo{value: val, isSet: true}
}

func (v NullableKylo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKylo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


