/*
Kowabunga API

Kvm Orchestrator With A BUNch of Goods Added

API version: 0.53.2
Contact: maintainers@kowabunga.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kowabunga

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the StoragePool type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StoragePool{}

// StoragePool A storage pool.
type StoragePool struct {
	// The storage pool ID (auto-generated).
	Id *string `json:"id,omitempty"`
	// The storage pool name.
	Name string `json:"name"`
	// The storage pool description.
	Description *string `json:"description,omitempty"`
	// Ceph pool name.
	Pool string `json:"pool"`
	// Ceph Monitor(s) address or FQDN.
	CephAddress *string `json:"ceph_address,omitempty"`
	// Ceph Monitor(s) port (default 3300).
	CephPort *int64 `json:"ceph_port,omitempty"`
	// The libvirt secret UUID for CephX authentication.
	CephSecretUuid *string `json:"ceph_secret_uuid,omitempty"`
	Cost *Cost `json:"cost,omitempty"`
	// a list of existing remote agents managing the storage pool.
	Agents []string `json:"agents"`
}

type _StoragePool StoragePool

// NewStoragePool instantiates a new StoragePool object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStoragePool(name string, pool string, agents []string) *StoragePool {
	this := StoragePool{}
	this.Name = name
	this.Pool = pool
	var cephAddress string = "localhost"
	this.CephAddress = &cephAddress
	var cephPort int64 = 3300
	this.CephPort = &cephPort
	this.Agents = agents
	return &this
}

// NewStoragePoolWithDefaults instantiates a new StoragePool object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStoragePoolWithDefaults() *StoragePool {
	this := StoragePool{}
	var cephAddress string = "localhost"
	this.CephAddress = &cephAddress
	var cephPort int64 = 3300
	this.CephPort = &cephPort
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *StoragePool) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StoragePool) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *StoragePool) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *StoragePool) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value
func (o *StoragePool) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *StoragePool) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *StoragePool) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *StoragePool) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StoragePool) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *StoragePool) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *StoragePool) SetDescription(v string) {
	o.Description = &v
}

// GetPool returns the Pool field value
func (o *StoragePool) GetPool() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Pool
}

// GetPoolOk returns a tuple with the Pool field value
// and a boolean to check if the value has been set.
func (o *StoragePool) GetPoolOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Pool, true
}

// SetPool sets field value
func (o *StoragePool) SetPool(v string) {
	o.Pool = v
}

// GetCephAddress returns the CephAddress field value if set, zero value otherwise.
func (o *StoragePool) GetCephAddress() string {
	if o == nil || IsNil(o.CephAddress) {
		var ret string
		return ret
	}
	return *o.CephAddress
}

// GetCephAddressOk returns a tuple with the CephAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StoragePool) GetCephAddressOk() (*string, bool) {
	if o == nil || IsNil(o.CephAddress) {
		return nil, false
	}
	return o.CephAddress, true
}

// HasCephAddress returns a boolean if a field has been set.
func (o *StoragePool) HasCephAddress() bool {
	if o != nil && !IsNil(o.CephAddress) {
		return true
	}

	return false
}

// SetCephAddress gets a reference to the given string and assigns it to the CephAddress field.
func (o *StoragePool) SetCephAddress(v string) {
	o.CephAddress = &v
}

// GetCephPort returns the CephPort field value if set, zero value otherwise.
func (o *StoragePool) GetCephPort() int64 {
	if o == nil || IsNil(o.CephPort) {
		var ret int64
		return ret
	}
	return *o.CephPort
}

// GetCephPortOk returns a tuple with the CephPort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StoragePool) GetCephPortOk() (*int64, bool) {
	if o == nil || IsNil(o.CephPort) {
		return nil, false
	}
	return o.CephPort, true
}

// HasCephPort returns a boolean if a field has been set.
func (o *StoragePool) HasCephPort() bool {
	if o != nil && !IsNil(o.CephPort) {
		return true
	}

	return false
}

// SetCephPort gets a reference to the given int64 and assigns it to the CephPort field.
func (o *StoragePool) SetCephPort(v int64) {
	o.CephPort = &v
}

// GetCephSecretUuid returns the CephSecretUuid field value if set, zero value otherwise.
func (o *StoragePool) GetCephSecretUuid() string {
	if o == nil || IsNil(o.CephSecretUuid) {
		var ret string
		return ret
	}
	return *o.CephSecretUuid
}

// GetCephSecretUuidOk returns a tuple with the CephSecretUuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StoragePool) GetCephSecretUuidOk() (*string, bool) {
	if o == nil || IsNil(o.CephSecretUuid) {
		return nil, false
	}
	return o.CephSecretUuid, true
}

// HasCephSecretUuid returns a boolean if a field has been set.
func (o *StoragePool) HasCephSecretUuid() bool {
	if o != nil && !IsNil(o.CephSecretUuid) {
		return true
	}

	return false
}

// SetCephSecretUuid gets a reference to the given string and assigns it to the CephSecretUuid field.
func (o *StoragePool) SetCephSecretUuid(v string) {
	o.CephSecretUuid = &v
}

// GetCost returns the Cost field value if set, zero value otherwise.
func (o *StoragePool) GetCost() Cost {
	if o == nil || IsNil(o.Cost) {
		var ret Cost
		return ret
	}
	return *o.Cost
}

// GetCostOk returns a tuple with the Cost field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StoragePool) GetCostOk() (*Cost, bool) {
	if o == nil || IsNil(o.Cost) {
		return nil, false
	}
	return o.Cost, true
}

// HasCost returns a boolean if a field has been set.
func (o *StoragePool) HasCost() bool {
	if o != nil && !IsNil(o.Cost) {
		return true
	}

	return false
}

// SetCost gets a reference to the given Cost and assigns it to the Cost field.
func (o *StoragePool) SetCost(v Cost) {
	o.Cost = &v
}

// GetAgents returns the Agents field value
func (o *StoragePool) GetAgents() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Agents
}

// GetAgentsOk returns a tuple with the Agents field value
// and a boolean to check if the value has been set.
func (o *StoragePool) GetAgentsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Agents, true
}

// SetAgents sets field value
func (o *StoragePool) SetAgents(v []string) {
	o.Agents = v
}

func (o StoragePool) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StoragePool) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["name"] = o.Name
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	toSerialize["pool"] = o.Pool
	if !IsNil(o.CephAddress) {
		toSerialize["ceph_address"] = o.CephAddress
	}
	if !IsNil(o.CephPort) {
		toSerialize["ceph_port"] = o.CephPort
	}
	if !IsNil(o.CephSecretUuid) {
		toSerialize["ceph_secret_uuid"] = o.CephSecretUuid
	}
	if !IsNil(o.Cost) {
		toSerialize["cost"] = o.Cost
	}
	toSerialize["agents"] = o.Agents
	return toSerialize, nil
}

func (o *StoragePool) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"pool",
		"agents",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varStoragePool := _StoragePool{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varStoragePool)

	if err != nil {
		return err
	}

	*o = StoragePool(varStoragePool)

	return err
}

type NullableStoragePool struct {
	value *StoragePool
	isSet bool
}

func (v NullableStoragePool) Get() *StoragePool {
	return v.value
}

func (v *NullableStoragePool) Set(val *StoragePool) {
	v.value = val
	v.isSet = true
}

func (v NullableStoragePool) IsSet() bool {
	return v.isSet
}

func (v *NullableStoragePool) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStoragePool(val *StoragePool) *NullableStoragePool {
	return &NullableStoragePool{value: val, isSet: true}
}

func (v NullableStoragePool) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStoragePool) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


