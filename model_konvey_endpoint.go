/*
Kowabunga API

Kvm Orchestrator With A BUNch of Goods Added

API version: 0.53.1
Contact: maintainers@kowabunga.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kowabunga

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the KonveyEndpoint type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &KonveyEndpoint{}

// KonveyEndpoint A Konvey Endpoint Service settings.
type KonveyEndpoint struct {
	// The Konvey (Kowabunga Network Load-Balancer) endpoint name.
	Name string `json:"name"`
	// The port to be exposed.
	Port int64 `json:"port"`
	// The transport layer protocol to be exposed.
	Protocol string `json:"protocol"`
	Backends KonveyBackends `json:"backends"`
}

type _KonveyEndpoint KonveyEndpoint

// NewKonveyEndpoint instantiates a new KonveyEndpoint object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKonveyEndpoint(name string, port int64, protocol string, backends KonveyBackends) *KonveyEndpoint {
	this := KonveyEndpoint{}
	this.Name = name
	this.Port = port
	this.Protocol = protocol
	this.Backends = backends
	return &this
}

// NewKonveyEndpointWithDefaults instantiates a new KonveyEndpoint object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKonveyEndpointWithDefaults() *KonveyEndpoint {
	this := KonveyEndpoint{}
	var protocol string = "tcp"
	this.Protocol = protocol
	return &this
}

// GetName returns the Name field value
func (o *KonveyEndpoint) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *KonveyEndpoint) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *KonveyEndpoint) SetName(v string) {
	o.Name = v
}

// GetPort returns the Port field value
func (o *KonveyEndpoint) GetPort() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Port
}

// GetPortOk returns a tuple with the Port field value
// and a boolean to check if the value has been set.
func (o *KonveyEndpoint) GetPortOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Port, true
}

// SetPort sets field value
func (o *KonveyEndpoint) SetPort(v int64) {
	o.Port = v
}

// GetProtocol returns the Protocol field value
func (o *KonveyEndpoint) GetProtocol() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Protocol
}

// GetProtocolOk returns a tuple with the Protocol field value
// and a boolean to check if the value has been set.
func (o *KonveyEndpoint) GetProtocolOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Protocol, true
}

// SetProtocol sets field value
func (o *KonveyEndpoint) SetProtocol(v string) {
	o.Protocol = v
}

// GetBackends returns the Backends field value
func (o *KonveyEndpoint) GetBackends() KonveyBackends {
	if o == nil {
		var ret KonveyBackends
		return ret
	}

	return o.Backends
}

// GetBackendsOk returns a tuple with the Backends field value
// and a boolean to check if the value has been set.
func (o *KonveyEndpoint) GetBackendsOk() (*KonveyBackends, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Backends, true
}

// SetBackends sets field value
func (o *KonveyEndpoint) SetBackends(v KonveyBackends) {
	o.Backends = v
}

func (o KonveyEndpoint) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o KonveyEndpoint) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["port"] = o.Port
	toSerialize["protocol"] = o.Protocol
	toSerialize["backends"] = o.Backends
	return toSerialize, nil
}

func (o *KonveyEndpoint) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"port",
		"protocol",
		"backends",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varKonveyEndpoint := _KonveyEndpoint{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varKonveyEndpoint)

	if err != nil {
		return err
	}

	*o = KonveyEndpoint(varKonveyEndpoint)

	return err
}

type NullableKonveyEndpoint struct {
	value *KonveyEndpoint
	isSet bool
}

func (v NullableKonveyEndpoint) Get() *KonveyEndpoint {
	return v.value
}

func (v *NullableKonveyEndpoint) Set(val *KonveyEndpoint) {
	v.value = val
	v.isSet = true
}

func (v NullableKonveyEndpoint) IsSet() bool {
	return v.isSet
}

func (v *NullableKonveyEndpoint) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKonveyEndpoint(val *KonveyEndpoint) *NullableKonveyEndpoint {
	return &NullableKonveyEndpoint{value: val, isSet: true}
}

func (v NullableKonveyEndpoint) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKonveyEndpoint) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


