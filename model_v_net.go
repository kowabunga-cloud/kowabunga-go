/*
Kowabunga API

Kvm Orchestrator With A BUNch of Goods Added

API version: 0.53.1
Contact: maintainers@kowabunga.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kowabunga

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the VNet type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VNet{}

// VNet A virtual network.
type VNet struct {
	// The virtual network ID (auto-generated).
	Id *string `json:"id,omitempty"`
	// The virtual network name.
	Name string `json:"name"`
	// The virtual network description.
	Description *string `json:"description,omitempty"`
	// The VLAN identifier (0 if unspecified).
	Vlan *int64 `json:"vlan,omitempty"`
	// The libvirt's bridge network interface (brX).
	Interface string `json:"interface"`
	// Is the virtual network adapter connected to private (LAN) or public (WAN) physical network ?.
	Private *bool `json:"private,omitempty"`
}

type _VNet VNet

// NewVNet instantiates a new VNet object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVNet(name string, interface_ string) *VNet {
	this := VNet{}
	this.Name = name
	this.Interface = interface_
	var private bool = true
	this.Private = &private
	return &this
}

// NewVNetWithDefaults instantiates a new VNet object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVNetWithDefaults() *VNet {
	this := VNet{}
	var private bool = true
	this.Private = &private
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *VNet) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VNet) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *VNet) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *VNet) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value
func (o *VNet) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *VNet) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *VNet) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *VNet) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VNet) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *VNet) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *VNet) SetDescription(v string) {
	o.Description = &v
}

// GetVlan returns the Vlan field value if set, zero value otherwise.
func (o *VNet) GetVlan() int64 {
	if o == nil || IsNil(o.Vlan) {
		var ret int64
		return ret
	}
	return *o.Vlan
}

// GetVlanOk returns a tuple with the Vlan field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VNet) GetVlanOk() (*int64, bool) {
	if o == nil || IsNil(o.Vlan) {
		return nil, false
	}
	return o.Vlan, true
}

// HasVlan returns a boolean if a field has been set.
func (o *VNet) HasVlan() bool {
	if o != nil && !IsNil(o.Vlan) {
		return true
	}

	return false
}

// SetVlan gets a reference to the given int64 and assigns it to the Vlan field.
func (o *VNet) SetVlan(v int64) {
	o.Vlan = &v
}

// GetInterface returns the Interface field value
func (o *VNet) GetInterface() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Interface
}

// GetInterfaceOk returns a tuple with the Interface field value
// and a boolean to check if the value has been set.
func (o *VNet) GetInterfaceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Interface, true
}

// SetInterface sets field value
func (o *VNet) SetInterface(v string) {
	o.Interface = v
}

// GetPrivate returns the Private field value if set, zero value otherwise.
func (o *VNet) GetPrivate() bool {
	if o == nil || IsNil(o.Private) {
		var ret bool
		return ret
	}
	return *o.Private
}

// GetPrivateOk returns a tuple with the Private field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VNet) GetPrivateOk() (*bool, bool) {
	if o == nil || IsNil(o.Private) {
		return nil, false
	}
	return o.Private, true
}

// HasPrivate returns a boolean if a field has been set.
func (o *VNet) HasPrivate() bool {
	if o != nil && !IsNil(o.Private) {
		return true
	}

	return false
}

// SetPrivate gets a reference to the given bool and assigns it to the Private field.
func (o *VNet) SetPrivate(v bool) {
	o.Private = &v
}

func (o VNet) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VNet) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["name"] = o.Name
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Vlan) {
		toSerialize["vlan"] = o.Vlan
	}
	toSerialize["interface"] = o.Interface
	if !IsNil(o.Private) {
		toSerialize["private"] = o.Private
	}
	return toSerialize, nil
}

func (o *VNet) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"interface",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varVNet := _VNet{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varVNet)

	if err != nil {
		return err
	}

	*o = VNet(varVNet)

	return err
}

type NullableVNet struct {
	value *VNet
	isSet bool
}

func (v NullableVNet) Get() *VNet {
	return v.value
}

func (v *NullableVNet) Set(val *VNet) {
	v.value = val
	v.isSet = true
}

func (v NullableVNet) IsSet() bool {
	return v.isSet
}

func (v *NullableVNet) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVNet(val *VNet) *NullableVNet {
	return &NullableVNet{value: val, isSet: true}
}

func (v NullableVNet) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVNet) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


