/*
Kowabunga API

Kvm Orchestrator With A BUNch of Goods Added

API version: 0.53.2
Contact: maintainers@kowabunga.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kowabunga

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Cost type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Cost{}

// Cost A resource cost.
type Cost struct {
	// The unit price information.
	Price float32 `json:"price"`
	// The associated currency.
	Currency string `json:"currency"`
}

type _Cost Cost

// NewCost instantiates a new Cost object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCost(price float32, currency string) *Cost {
	this := Cost{}
	this.Price = price
	this.Currency = currency
	return &this
}

// NewCostWithDefaults instantiates a new Cost object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCostWithDefaults() *Cost {
	this := Cost{}
	return &this
}

// GetPrice returns the Price field value
func (o *Cost) GetPrice() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Price
}

// GetPriceOk returns a tuple with the Price field value
// and a boolean to check if the value has been set.
func (o *Cost) GetPriceOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Price, true
}

// SetPrice sets field value
func (o *Cost) SetPrice(v float32) {
	o.Price = v
}

// GetCurrency returns the Currency field value
func (o *Cost) GetCurrency() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value
// and a boolean to check if the value has been set.
func (o *Cost) GetCurrencyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Currency, true
}

// SetCurrency sets field value
func (o *Cost) SetCurrency(v string) {
	o.Currency = v
}

func (o Cost) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Cost) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["price"] = o.Price
	toSerialize["currency"] = o.Currency
	return toSerialize, nil
}

func (o *Cost) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"price",
		"currency",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCost := _Cost{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCost)

	if err != nil {
		return err
	}

	*o = Cost(varCost)

	return err
}

type NullableCost struct {
	value *Cost
	isSet bool
}

func (v NullableCost) Get() *Cost {
	return v.value
}

func (v *NullableCost) Set(val *Cost) {
	v.value = val
	v.isSet = true
}

func (v NullableCost) IsSet() bool {
	return v.isSet
}

func (v *NullableCost) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCost(val *Cost) *NullableCost {
	return &NullableCost{value: val, isSet: true}
}

func (v NullableCost) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCost) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


