/*
Kowabunga API

Kvm Orchestrator With A BUNch of Goods Added

API version: 0.53.2
Contact: maintainers@kowabunga.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kowabunga

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Instance type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Instance{}

// Instance A virtual machine instance.
type Instance struct {
	// The virtual machine instance ID (auto-generated).
	Id *string `json:"id,omitempty"`
	// The virtual machine instance name.
	Name string `json:"name"`
	// The virtual machine instance description.
	Description *string `json:"description,omitempty"`
	// The virtual machine instance memory size (in bytes).
	Memory int64 `json:"memory"`
	// The virtual machine instance number of vCPUs.
	Vcpus int64 `json:"vcpus"`
	// a list of existing network adapters to be connected to the instance.
	Adapters []string `json:"adapters,omitempty"`
	// volumes list of existing storage volumes (i.e. disks) to be connected to the instance.
	Volumes []string `json:"volumes,omitempty"`
}

type _Instance Instance

// NewInstance instantiates a new Instance object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInstance(name string, memory int64, vcpus int64) *Instance {
	this := Instance{}
	this.Name = name
	this.Memory = memory
	this.Vcpus = vcpus
	return &this
}

// NewInstanceWithDefaults instantiates a new Instance object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInstanceWithDefaults() *Instance {
	this := Instance{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Instance) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Instance) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Instance) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Instance) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value
func (o *Instance) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Instance) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Instance) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *Instance) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Instance) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *Instance) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *Instance) SetDescription(v string) {
	o.Description = &v
}

// GetMemory returns the Memory field value
func (o *Instance) GetMemory() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Memory
}

// GetMemoryOk returns a tuple with the Memory field value
// and a boolean to check if the value has been set.
func (o *Instance) GetMemoryOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Memory, true
}

// SetMemory sets field value
func (o *Instance) SetMemory(v int64) {
	o.Memory = v
}

// GetVcpus returns the Vcpus field value
func (o *Instance) GetVcpus() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Vcpus
}

// GetVcpusOk returns a tuple with the Vcpus field value
// and a boolean to check if the value has been set.
func (o *Instance) GetVcpusOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Vcpus, true
}

// SetVcpus sets field value
func (o *Instance) SetVcpus(v int64) {
	o.Vcpus = v
}

// GetAdapters returns the Adapters field value if set, zero value otherwise.
func (o *Instance) GetAdapters() []string {
	if o == nil || IsNil(o.Adapters) {
		var ret []string
		return ret
	}
	return o.Adapters
}

// GetAdaptersOk returns a tuple with the Adapters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Instance) GetAdaptersOk() ([]string, bool) {
	if o == nil || IsNil(o.Adapters) {
		return nil, false
	}
	return o.Adapters, true
}

// HasAdapters returns a boolean if a field has been set.
func (o *Instance) HasAdapters() bool {
	if o != nil && !IsNil(o.Adapters) {
		return true
	}

	return false
}

// SetAdapters gets a reference to the given []string and assigns it to the Adapters field.
func (o *Instance) SetAdapters(v []string) {
	o.Adapters = v
}

// GetVolumes returns the Volumes field value if set, zero value otherwise.
func (o *Instance) GetVolumes() []string {
	if o == nil || IsNil(o.Volumes) {
		var ret []string
		return ret
	}
	return o.Volumes
}

// GetVolumesOk returns a tuple with the Volumes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Instance) GetVolumesOk() ([]string, bool) {
	if o == nil || IsNil(o.Volumes) {
		return nil, false
	}
	return o.Volumes, true
}

// HasVolumes returns a boolean if a field has been set.
func (o *Instance) HasVolumes() bool {
	if o != nil && !IsNil(o.Volumes) {
		return true
	}

	return false
}

// SetVolumes gets a reference to the given []string and assigns it to the Volumes field.
func (o *Instance) SetVolumes(v []string) {
	o.Volumes = v
}

func (o Instance) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Instance) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["name"] = o.Name
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	toSerialize["memory"] = o.Memory
	toSerialize["vcpus"] = o.Vcpus
	if !IsNil(o.Adapters) {
		toSerialize["adapters"] = o.Adapters
	}
	if !IsNil(o.Volumes) {
		toSerialize["volumes"] = o.Volumes
	}
	return toSerialize, nil
}

func (o *Instance) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"memory",
		"vcpus",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varInstance := _Instance{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varInstance)

	if err != nil {
		return err
	}

	*o = Instance(varInstance)

	return err
}

type NullableInstance struct {
	value *Instance
	isSet bool
}

func (v NullableInstance) Get() *Instance {
	return v.value
}

func (v *NullableInstance) Set(val *Instance) {
	v.value = val
	v.isSet = true
}

func (v NullableInstance) IsSet() bool {
	return v.isSet
}

func (v *NullableInstance) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInstance(val *Instance) *NullableInstance {
	return &NullableInstance{value: val, isSet: true}
}

func (v NullableInstance) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInstance) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


