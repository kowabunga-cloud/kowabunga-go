/*
Kowabunga API

Testing ProjectAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package kowabunga

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	
)

func Test_kowabunga_ProjectAPIService(t *testing.T) {

	configuration := NewConfiguration()
	apiClient := NewAPIClient(configuration)

	t.Run("Test ProjectAPIService CreateProject", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ProjectAPI.CreateProject(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectAPIService CreateProjectDnsRecord", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId string

		resp, httpRes, err := apiClient.ProjectAPI.CreateProjectDnsRecord(context.Background(), projectId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectAPIService CreateProjectRegionKawaii", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId string
		var regionId string

		resp, httpRes, err := apiClient.ProjectAPI.CreateProjectRegionKawaii(context.Background(), projectId, regionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectAPIService CreateProjectRegionKonvey", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId string
		var regionId string

		resp, httpRes, err := apiClient.ProjectAPI.CreateProjectRegionKonvey(context.Background(), projectId, regionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectAPIService CreateProjectRegionKylo", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId string
		var regionId string

		resp, httpRes, err := apiClient.ProjectAPI.CreateProjectRegionKylo(context.Background(), projectId, regionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectAPIService CreateProjectRegionVolume", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId string
		var regionId string

		resp, httpRes, err := apiClient.ProjectAPI.CreateProjectRegionVolume(context.Background(), projectId, regionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectAPIService CreateProjectZoneInstance", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId string
		var zoneId string

		resp, httpRes, err := apiClient.ProjectAPI.CreateProjectZoneInstance(context.Background(), projectId, zoneId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectAPIService CreateProjectZoneKompute", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId string
		var zoneId string

		resp, httpRes, err := apiClient.ProjectAPI.CreateProjectZoneKompute(context.Background(), projectId, zoneId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectAPIService CreateProjectZoneKonvey", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId string
		var zoneId string

		resp, httpRes, err := apiClient.ProjectAPI.CreateProjectZoneKonvey(context.Background(), projectId, zoneId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectAPIService DeleteProject", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId string

		httpRes, err := apiClient.ProjectAPI.DeleteProject(context.Background(), projectId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectAPIService ListProjectDnsRecords", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId string

		resp, httpRes, err := apiClient.ProjectAPI.ListProjectDnsRecords(context.Background(), projectId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectAPIService ListProjectRegionKawaiis", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId string
		var regionId string

		resp, httpRes, err := apiClient.ProjectAPI.ListProjectRegionKawaiis(context.Background(), projectId, regionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectAPIService ListProjectRegionKonveys", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId string
		var regionId string

		resp, httpRes, err := apiClient.ProjectAPI.ListProjectRegionKonveys(context.Background(), projectId, regionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectAPIService ListProjectRegionKylos", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId string
		var regionId string

		resp, httpRes, err := apiClient.ProjectAPI.ListProjectRegionKylos(context.Background(), projectId, regionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectAPIService ListProjectRegionVolumes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId string
		var regionId string

		resp, httpRes, err := apiClient.ProjectAPI.ListProjectRegionVolumes(context.Background(), projectId, regionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectAPIService ListProjectZoneInstances", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId string
		var zoneId string

		resp, httpRes, err := apiClient.ProjectAPI.ListProjectZoneInstances(context.Background(), projectId, zoneId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectAPIService ListProjectZoneKomputes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId string
		var zoneId string

		resp, httpRes, err := apiClient.ProjectAPI.ListProjectZoneKomputes(context.Background(), projectId, zoneId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectAPIService ListProjectZoneKonveys", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId string
		var zoneId string

		resp, httpRes, err := apiClient.ProjectAPI.ListProjectZoneKonveys(context.Background(), projectId, zoneId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectAPIService ListProjects", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ProjectAPI.ListProjects(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectAPIService ReadProject", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId string

		resp, httpRes, err := apiClient.ProjectAPI.ReadProject(context.Background(), projectId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectAPIService ReadProjectCost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId string

		resp, httpRes, err := apiClient.ProjectAPI.ReadProjectCost(context.Background(), projectId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectAPIService ReadProjectUsage", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId string

		resp, httpRes, err := apiClient.ProjectAPI.ReadProjectUsage(context.Background(), projectId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectAPIService UpdateProject", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId string

		resp, httpRes, err := apiClient.ProjectAPI.UpdateProject(context.Background(), projectId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
