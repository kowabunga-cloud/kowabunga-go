/*
Kowabunga API

Kvm Orchestrator With A BUNch of Goods Added

API version: 0.53.2
Contact: maintainers@kowabunga.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kowabunga

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Konvey type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Konvey{}

// Konvey A Kowabunga Konvey is a layer-4 network load-balancer used to distribute service requests to associated backend instances.
type Konvey struct {
	// The Konvey (Kowabunga Network Load-Balancer) ID (auto-generated).
	Id *string `json:"id,omitempty"`
	// The Konvey (Kowabunga Network Load-Balancer) name.
	Name *string `json:"name,omitempty"`
	// The Konvey (Kowabunga Network Load-Balancer) description.
	Description *string `json:"description,omitempty"`
	// The Konvey (Kowabunga Network Load-Balancer) assigned private virtual IP address (read-only).
	Vip *string `json:"vip,omitempty"`
	// Whether Konvey (Kowabunga Network Load-Balancer) must be deployed in a highly-available replicated state to support service failover.
	Failover *bool `json:"failover,omitempty"`
	// The Konvey (Kowabunga Network Load-Balancer) list of load-balanced endpoints.
	Endpoints []KonveyEndpoint `json:"endpoints"`
}

type _Konvey Konvey

// NewKonvey instantiates a new Konvey object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKonvey(endpoints []KonveyEndpoint) *Konvey {
	this := Konvey{}
	var failover bool = true
	this.Failover = &failover
	this.Endpoints = endpoints
	return &this
}

// NewKonveyWithDefaults instantiates a new Konvey object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKonveyWithDefaults() *Konvey {
	this := Konvey{}
	var failover bool = true
	this.Failover = &failover
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Konvey) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Konvey) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Konvey) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Konvey) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Konvey) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Konvey) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Konvey) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Konvey) SetName(v string) {
	o.Name = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *Konvey) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Konvey) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *Konvey) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *Konvey) SetDescription(v string) {
	o.Description = &v
}

// GetVip returns the Vip field value if set, zero value otherwise.
func (o *Konvey) GetVip() string {
	if o == nil || IsNil(o.Vip) {
		var ret string
		return ret
	}
	return *o.Vip
}

// GetVipOk returns a tuple with the Vip field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Konvey) GetVipOk() (*string, bool) {
	if o == nil || IsNil(o.Vip) {
		return nil, false
	}
	return o.Vip, true
}

// HasVip returns a boolean if a field has been set.
func (o *Konvey) HasVip() bool {
	if o != nil && !IsNil(o.Vip) {
		return true
	}

	return false
}

// SetVip gets a reference to the given string and assigns it to the Vip field.
func (o *Konvey) SetVip(v string) {
	o.Vip = &v
}

// GetFailover returns the Failover field value if set, zero value otherwise.
func (o *Konvey) GetFailover() bool {
	if o == nil || IsNil(o.Failover) {
		var ret bool
		return ret
	}
	return *o.Failover
}

// GetFailoverOk returns a tuple with the Failover field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Konvey) GetFailoverOk() (*bool, bool) {
	if o == nil || IsNil(o.Failover) {
		return nil, false
	}
	return o.Failover, true
}

// HasFailover returns a boolean if a field has been set.
func (o *Konvey) HasFailover() bool {
	if o != nil && !IsNil(o.Failover) {
		return true
	}

	return false
}

// SetFailover gets a reference to the given bool and assigns it to the Failover field.
func (o *Konvey) SetFailover(v bool) {
	o.Failover = &v
}

// GetEndpoints returns the Endpoints field value
func (o *Konvey) GetEndpoints() []KonveyEndpoint {
	if o == nil {
		var ret []KonveyEndpoint
		return ret
	}

	return o.Endpoints
}

// GetEndpointsOk returns a tuple with the Endpoints field value
// and a boolean to check if the value has been set.
func (o *Konvey) GetEndpointsOk() ([]KonveyEndpoint, bool) {
	if o == nil {
		return nil, false
	}
	return o.Endpoints, true
}

// SetEndpoints sets field value
func (o *Konvey) SetEndpoints(v []KonveyEndpoint) {
	o.Endpoints = v
}

func (o Konvey) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Konvey) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Vip) {
		toSerialize["vip"] = o.Vip
	}
	if !IsNil(o.Failover) {
		toSerialize["failover"] = o.Failover
	}
	toSerialize["endpoints"] = o.Endpoints
	return toSerialize, nil
}

func (o *Konvey) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"endpoints",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varKonvey := _Konvey{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varKonvey)

	if err != nil {
		return err
	}

	*o = Konvey(varKonvey)

	return err
}

type NullableKonvey struct {
	value *Konvey
	isSet bool
}

func (v NullableKonvey) Get() *Konvey {
	return v.value
}

func (v *NullableKonvey) Set(val *Konvey) {
	v.value = val
	v.isSet = true
}

func (v NullableKonvey) IsSet() bool {
	return v.isSet
}

func (v *NullableKonvey) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKonvey(val *Konvey) *NullableKonvey {
	return &NullableKonvey{value: val, isSet: true}
}

func (v NullableKonvey) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKonvey) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


