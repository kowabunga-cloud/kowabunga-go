/*
Kowabunga API

Testing KomputeAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package kowabunga

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	
)

func Test_kowabunga_KomputeAPIService(t *testing.T) {

	configuration := NewConfiguration()
	apiClient := NewAPIClient(configuration)

	t.Run("Test KomputeAPIService DeleteKompute", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var komputeId string

		httpRes, err := apiClient.KomputeAPI.DeleteKompute(context.Background(), komputeId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test KomputeAPIService ListKomputes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.KomputeAPI.ListKomputes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test KomputeAPIService ReadKompute", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var komputeId string

		resp, httpRes, err := apiClient.KomputeAPI.ReadKompute(context.Background(), komputeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test KomputeAPIService ReadKomputeState", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var komputeId string

		resp, httpRes, err := apiClient.KomputeAPI.ReadKomputeState(context.Background(), komputeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test KomputeAPIService RebootKompute", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var komputeId string

		httpRes, err := apiClient.KomputeAPI.RebootKompute(context.Background(), komputeId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test KomputeAPIService ResetKompute", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var komputeId string

		httpRes, err := apiClient.KomputeAPI.ResetKompute(context.Background(), komputeId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test KomputeAPIService ResumeKompute", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var komputeId string

		httpRes, err := apiClient.KomputeAPI.ResumeKompute(context.Background(), komputeId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test KomputeAPIService ShutdownKompute", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var komputeId string

		httpRes, err := apiClient.KomputeAPI.ShutdownKompute(context.Background(), komputeId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test KomputeAPIService StartKompute", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var komputeId string

		httpRes, err := apiClient.KomputeAPI.StartKompute(context.Background(), komputeId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test KomputeAPIService StopKompute", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var komputeId string

		httpRes, err := apiClient.KomputeAPI.StopKompute(context.Background(), komputeId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test KomputeAPIService SuspendKompute", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var komputeId string

		httpRes, err := apiClient.KomputeAPI.SuspendKompute(context.Background(), komputeId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test KomputeAPIService UpdateKompute", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var komputeId string

		resp, httpRes, err := apiClient.KomputeAPI.UpdateKompute(context.Background(), komputeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
