/*
Kowabunga API documentation

Kvm Orchestrator With A BUNch of Goods Added

API version: 0.52.5
Contact: maintainers@kowabunga.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kowabunga

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the KaktusCaps type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &KaktusCaps{}

// KaktusCaps A Kaktus computing node capability.
type KaktusCaps struct {
	Cpu KaktusCPU `json:"cpu"`
	// The Kaktus computing node memory size (bytes).
	Memory int64 `json:"memory"`
}

type _KaktusCaps KaktusCaps

// NewKaktusCaps instantiates a new KaktusCaps object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKaktusCaps(cpu KaktusCPU, memory int64) *KaktusCaps {
	this := KaktusCaps{}
	this.Cpu = cpu
	this.Memory = memory
	return &this
}

// NewKaktusCapsWithDefaults instantiates a new KaktusCaps object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKaktusCapsWithDefaults() *KaktusCaps {
	this := KaktusCaps{}
	return &this
}

// GetCpu returns the Cpu field value
func (o *KaktusCaps) GetCpu() KaktusCPU {
	if o == nil {
		var ret KaktusCPU
		return ret
	}

	return o.Cpu
}

// GetCpuOk returns a tuple with the Cpu field value
// and a boolean to check if the value has been set.
func (o *KaktusCaps) GetCpuOk() (*KaktusCPU, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Cpu, true
}

// SetCpu sets field value
func (o *KaktusCaps) SetCpu(v KaktusCPU) {
	o.Cpu = v
}

// GetMemory returns the Memory field value
func (o *KaktusCaps) GetMemory() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Memory
}

// GetMemoryOk returns a tuple with the Memory field value
// and a boolean to check if the value has been set.
func (o *KaktusCaps) GetMemoryOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Memory, true
}

// SetMemory sets field value
func (o *KaktusCaps) SetMemory(v int64) {
	o.Memory = v
}

func (o KaktusCaps) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o KaktusCaps) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["cpu"] = o.Cpu
	toSerialize["memory"] = o.Memory
	return toSerialize, nil
}

func (o *KaktusCaps) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"cpu",
		"memory",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varKaktusCaps := _KaktusCaps{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varKaktusCaps)

	if err != nil {
		return err
	}

	*o = KaktusCaps(varKaktusCaps)

	return err
}

type NullableKaktusCaps struct {
	value *KaktusCaps
	isSet bool
}

func (v NullableKaktusCaps) Get() *KaktusCaps {
	return v.value
}

func (v *NullableKaktusCaps) Set(val *KaktusCaps) {
	v.value = val
	v.isSet = true
}

func (v NullableKaktusCaps) IsSet() bool {
	return v.isSet
}

func (v *NullableKaktusCaps) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKaktusCaps(val *KaktusCaps) *NullableKaktusCaps {
	return &NullableKaktusCaps{value: val, isSet: true}
}

func (v NullableKaktusCaps) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKaktusCaps) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


