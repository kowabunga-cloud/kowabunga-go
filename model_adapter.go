/*
Kowabunga API documentation

Kvm Orchestrator With A BUNch of Goods Added

API version: 0.52.5
Contact: maintainers@kowabunga.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kowabunga

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Adapter type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Adapter{}

// Adapter A network adapter.
type Adapter struct {
	// The network adapter ID (auto-generated).
	Id *string `json:"id,omitempty"`
	// The network adapter name.
	Name string `json:"name"`
	// The network adapter description.
	Description *string `json:"description,omitempty"`
	// The network adapter hardware address (e.g. 00:11:22:33:44:55). Auto-generated if unspecified.
	Mac *string `json:"mac,omitempty"`
	// The network adapter list of associated IPv4 addresses.
	Addresses []string `json:"addresses,omitempty"`
	// The network adapter is a reserved adapter (e.g. router), where the same hardware address can be reused over several subnets.
	Reserved *bool `json:"reserved,omitempty"`
}

type _Adapter Adapter

// NewAdapter instantiates a new Adapter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAdapter(name string) *Adapter {
	this := Adapter{}
	this.Name = name
	var reserved bool = false
	this.Reserved = &reserved
	return &this
}

// NewAdapterWithDefaults instantiates a new Adapter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAdapterWithDefaults() *Adapter {
	this := Adapter{}
	var reserved bool = false
	this.Reserved = &reserved
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Adapter) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Adapter) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Adapter) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Adapter) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value
func (o *Adapter) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Adapter) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Adapter) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *Adapter) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Adapter) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *Adapter) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *Adapter) SetDescription(v string) {
	o.Description = &v
}

// GetMac returns the Mac field value if set, zero value otherwise.
func (o *Adapter) GetMac() string {
	if o == nil || IsNil(o.Mac) {
		var ret string
		return ret
	}
	return *o.Mac
}

// GetMacOk returns a tuple with the Mac field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Adapter) GetMacOk() (*string, bool) {
	if o == nil || IsNil(o.Mac) {
		return nil, false
	}
	return o.Mac, true
}

// HasMac returns a boolean if a field has been set.
func (o *Adapter) HasMac() bool {
	if o != nil && !IsNil(o.Mac) {
		return true
	}

	return false
}

// SetMac gets a reference to the given string and assigns it to the Mac field.
func (o *Adapter) SetMac(v string) {
	o.Mac = &v
}

// GetAddresses returns the Addresses field value if set, zero value otherwise.
func (o *Adapter) GetAddresses() []string {
	if o == nil || IsNil(o.Addresses) {
		var ret []string
		return ret
	}
	return o.Addresses
}

// GetAddressesOk returns a tuple with the Addresses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Adapter) GetAddressesOk() ([]string, bool) {
	if o == nil || IsNil(o.Addresses) {
		return nil, false
	}
	return o.Addresses, true
}

// HasAddresses returns a boolean if a field has been set.
func (o *Adapter) HasAddresses() bool {
	if o != nil && !IsNil(o.Addresses) {
		return true
	}

	return false
}

// SetAddresses gets a reference to the given []string and assigns it to the Addresses field.
func (o *Adapter) SetAddresses(v []string) {
	o.Addresses = v
}

// GetReserved returns the Reserved field value if set, zero value otherwise.
func (o *Adapter) GetReserved() bool {
	if o == nil || IsNil(o.Reserved) {
		var ret bool
		return ret
	}
	return *o.Reserved
}

// GetReservedOk returns a tuple with the Reserved field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Adapter) GetReservedOk() (*bool, bool) {
	if o == nil || IsNil(o.Reserved) {
		return nil, false
	}
	return o.Reserved, true
}

// HasReserved returns a boolean if a field has been set.
func (o *Adapter) HasReserved() bool {
	if o != nil && !IsNil(o.Reserved) {
		return true
	}

	return false
}

// SetReserved gets a reference to the given bool and assigns it to the Reserved field.
func (o *Adapter) SetReserved(v bool) {
	o.Reserved = &v
}

func (o Adapter) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Adapter) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["name"] = o.Name
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Mac) {
		toSerialize["mac"] = o.Mac
	}
	if !IsNil(o.Addresses) {
		toSerialize["addresses"] = o.Addresses
	}
	if !IsNil(o.Reserved) {
		toSerialize["reserved"] = o.Reserved
	}
	return toSerialize, nil
}

func (o *Adapter) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAdapter := _Adapter{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAdapter)

	if err != nil {
		return err
	}

	*o = Adapter(varAdapter)

	return err
}

type NullableAdapter struct {
	value *Adapter
	isSet bool
}

func (v NullableAdapter) Get() *Adapter {
	return v.value
}

func (v *NullableAdapter) Set(val *Adapter) {
	v.value = val
	v.isSet = true
}

func (v NullableAdapter) IsSet() bool {
	return v.isSet
}

func (v *NullableAdapter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAdapter(val *Adapter) *NullableAdapter {
	return &NullableAdapter{value: val, isSet: true}
}

func (v NullableAdapter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAdapter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


