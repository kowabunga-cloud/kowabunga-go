/*
Kowabunga API documentation

Kvm Orchestrator With A BUNch of Goods Added

API version: 0.52.5
Contact: maintainers@kowabunga.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kowabunga

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Kiwi type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Kiwi{}

// Kiwi A Kiwi (Kowabunga Inner Wan Interface) provides edge-network services..
type Kiwi struct {
	// The Kiwi (Kowabunga Inner Wan Interface) provides edge-network services. ID (auto-generated).
	Id *string `json:"id,omitempty"`
	// The Kiwi (Kowabunga Inner Wan Interface) provides edge-network services. name.
	Name string `json:"name"`
	// The Kiwi (Kowabunga Inner Wan Interface) provides edge-network services. description.
	Description *string `json:"description,omitempty"`
	// a list of existing remote agents managing the network gateway.
	Agents []string `json:"agents,omitempty"`
}

type _Kiwi Kiwi

// NewKiwi instantiates a new Kiwi object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKiwi(name string) *Kiwi {
	this := Kiwi{}
	this.Name = name
	return &this
}

// NewKiwiWithDefaults instantiates a new Kiwi object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKiwiWithDefaults() *Kiwi {
	this := Kiwi{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Kiwi) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Kiwi) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Kiwi) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Kiwi) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value
func (o *Kiwi) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Kiwi) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Kiwi) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *Kiwi) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Kiwi) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *Kiwi) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *Kiwi) SetDescription(v string) {
	o.Description = &v
}

// GetAgents returns the Agents field value if set, zero value otherwise.
func (o *Kiwi) GetAgents() []string {
	if o == nil || IsNil(o.Agents) {
		var ret []string
		return ret
	}
	return o.Agents
}

// GetAgentsOk returns a tuple with the Agents field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Kiwi) GetAgentsOk() ([]string, bool) {
	if o == nil || IsNil(o.Agents) {
		return nil, false
	}
	return o.Agents, true
}

// HasAgents returns a boolean if a field has been set.
func (o *Kiwi) HasAgents() bool {
	if o != nil && !IsNil(o.Agents) {
		return true
	}

	return false
}

// SetAgents gets a reference to the given []string and assigns it to the Agents field.
func (o *Kiwi) SetAgents(v []string) {
	o.Agents = v
}

func (o Kiwi) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Kiwi) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["name"] = o.Name
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Agents) {
		toSerialize["agents"] = o.Agents
	}
	return toSerialize, nil
}

func (o *Kiwi) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varKiwi := _Kiwi{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varKiwi)

	if err != nil {
		return err
	}

	*o = Kiwi(varKiwi)

	return err
}

type NullableKiwi struct {
	value *Kiwi
	isSet bool
}

func (v NullableKiwi) Get() *Kiwi {
	return v.value
}

func (v *NullableKiwi) Set(val *Kiwi) {
	v.value = val
	v.isSet = true
}

func (v NullableKiwi) IsSet() bool {
	return v.isSet
}

func (v *NullableKiwi) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKiwi(val *Kiwi) *NullableKiwi {
	return &NullableKiwi{value: val, isSet: true}
}

func (v NullableKiwi) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKiwi) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


