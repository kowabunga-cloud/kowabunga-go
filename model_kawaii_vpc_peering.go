/*
Kowabunga API documentation

Kvm Orchestrator With A BUNch of Goods Added

API version: 0.52.5
Contact: maintainers@kowabunga.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kowabunga

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the KawaiiVpcPeering type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &KawaiiVpcPeering{}

// KawaiiVpcPeering A Kawaii internal VPC subnet peering.
type KawaiiVpcPeering struct {
	// Kowabunga Subnet ID to be peered with (subnet local IP addresses will be automatically assigned to Kawaii instances)..
	Subnet string `json:"subnet"`
	// The default VPC traffic forwarding policy.
	Policy *string `json:"policy,omitempty"`
	// The firewall list of forwarding ingress rules from VPC peered subnet. ICMP traffic is always accepted. The specified ruleset will be explicitly accepted if drop is the default policy (useless otherwise).
	Ingress []KawaiiVpcForwardRule `json:"ingress,omitempty"`
	// The firewall list of forwarding egress rules to VPC peered subnet. ICMP traffic is always accepted. The specified ruleset will be explicitly accepted if drop is the default policy (useless otherwise).
	Egress []KawaiiVpcForwardRule `json:"egress,omitempty"`
	// The per-zone auto-assigned private IPs in peered subnet (read-only).
	Netip []KawaiiVpcNetIpZone `json:"netip,omitempty"`
}

type _KawaiiVpcPeering KawaiiVpcPeering

// NewKawaiiVpcPeering instantiates a new KawaiiVpcPeering object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKawaiiVpcPeering(subnet string) *KawaiiVpcPeering {
	this := KawaiiVpcPeering{}
	this.Subnet = subnet
	var policy string = "drop"
	this.Policy = &policy
	return &this
}

// NewKawaiiVpcPeeringWithDefaults instantiates a new KawaiiVpcPeering object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKawaiiVpcPeeringWithDefaults() *KawaiiVpcPeering {
	this := KawaiiVpcPeering{}
	var policy string = "drop"
	this.Policy = &policy
	return &this
}

// GetSubnet returns the Subnet field value
func (o *KawaiiVpcPeering) GetSubnet() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Subnet
}

// GetSubnetOk returns a tuple with the Subnet field value
// and a boolean to check if the value has been set.
func (o *KawaiiVpcPeering) GetSubnetOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Subnet, true
}

// SetSubnet sets field value
func (o *KawaiiVpcPeering) SetSubnet(v string) {
	o.Subnet = v
}

// GetPolicy returns the Policy field value if set, zero value otherwise.
func (o *KawaiiVpcPeering) GetPolicy() string {
	if o == nil || IsNil(o.Policy) {
		var ret string
		return ret
	}
	return *o.Policy
}

// GetPolicyOk returns a tuple with the Policy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KawaiiVpcPeering) GetPolicyOk() (*string, bool) {
	if o == nil || IsNil(o.Policy) {
		return nil, false
	}
	return o.Policy, true
}

// HasPolicy returns a boolean if a field has been set.
func (o *KawaiiVpcPeering) HasPolicy() bool {
	if o != nil && !IsNil(o.Policy) {
		return true
	}

	return false
}

// SetPolicy gets a reference to the given string and assigns it to the Policy field.
func (o *KawaiiVpcPeering) SetPolicy(v string) {
	o.Policy = &v
}

// GetIngress returns the Ingress field value if set, zero value otherwise.
func (o *KawaiiVpcPeering) GetIngress() []KawaiiVpcForwardRule {
	if o == nil || IsNil(o.Ingress) {
		var ret []KawaiiVpcForwardRule
		return ret
	}
	return o.Ingress
}

// GetIngressOk returns a tuple with the Ingress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KawaiiVpcPeering) GetIngressOk() ([]KawaiiVpcForwardRule, bool) {
	if o == nil || IsNil(o.Ingress) {
		return nil, false
	}
	return o.Ingress, true
}

// HasIngress returns a boolean if a field has been set.
func (o *KawaiiVpcPeering) HasIngress() bool {
	if o != nil && !IsNil(o.Ingress) {
		return true
	}

	return false
}

// SetIngress gets a reference to the given []KawaiiVpcForwardRule and assigns it to the Ingress field.
func (o *KawaiiVpcPeering) SetIngress(v []KawaiiVpcForwardRule) {
	o.Ingress = v
}

// GetEgress returns the Egress field value if set, zero value otherwise.
func (o *KawaiiVpcPeering) GetEgress() []KawaiiVpcForwardRule {
	if o == nil || IsNil(o.Egress) {
		var ret []KawaiiVpcForwardRule
		return ret
	}
	return o.Egress
}

// GetEgressOk returns a tuple with the Egress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KawaiiVpcPeering) GetEgressOk() ([]KawaiiVpcForwardRule, bool) {
	if o == nil || IsNil(o.Egress) {
		return nil, false
	}
	return o.Egress, true
}

// HasEgress returns a boolean if a field has been set.
func (o *KawaiiVpcPeering) HasEgress() bool {
	if o != nil && !IsNil(o.Egress) {
		return true
	}

	return false
}

// SetEgress gets a reference to the given []KawaiiVpcForwardRule and assigns it to the Egress field.
func (o *KawaiiVpcPeering) SetEgress(v []KawaiiVpcForwardRule) {
	o.Egress = v
}

// GetNetip returns the Netip field value if set, zero value otherwise.
func (o *KawaiiVpcPeering) GetNetip() []KawaiiVpcNetIpZone {
	if o == nil || IsNil(o.Netip) {
		var ret []KawaiiVpcNetIpZone
		return ret
	}
	return o.Netip
}

// GetNetipOk returns a tuple with the Netip field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KawaiiVpcPeering) GetNetipOk() ([]KawaiiVpcNetIpZone, bool) {
	if o == nil || IsNil(o.Netip) {
		return nil, false
	}
	return o.Netip, true
}

// HasNetip returns a boolean if a field has been set.
func (o *KawaiiVpcPeering) HasNetip() bool {
	if o != nil && !IsNil(o.Netip) {
		return true
	}

	return false
}

// SetNetip gets a reference to the given []KawaiiVpcNetIpZone and assigns it to the Netip field.
func (o *KawaiiVpcPeering) SetNetip(v []KawaiiVpcNetIpZone) {
	o.Netip = v
}

func (o KawaiiVpcPeering) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o KawaiiVpcPeering) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["subnet"] = o.Subnet
	if !IsNil(o.Policy) {
		toSerialize["policy"] = o.Policy
	}
	if !IsNil(o.Ingress) {
		toSerialize["ingress"] = o.Ingress
	}
	if !IsNil(o.Egress) {
		toSerialize["egress"] = o.Egress
	}
	if !IsNil(o.Netip) {
		toSerialize["netip"] = o.Netip
	}
	return toSerialize, nil
}

func (o *KawaiiVpcPeering) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"subnet",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varKawaiiVpcPeering := _KawaiiVpcPeering{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varKawaiiVpcPeering)

	if err != nil {
		return err
	}

	*o = KawaiiVpcPeering(varKawaiiVpcPeering)

	return err
}

type NullableKawaiiVpcPeering struct {
	value *KawaiiVpcPeering
	isSet bool
}

func (v NullableKawaiiVpcPeering) Get() *KawaiiVpcPeering {
	return v.value
}

func (v *NullableKawaiiVpcPeering) Set(val *KawaiiVpcPeering) {
	v.value = val
	v.isSet = true
}

func (v NullableKawaiiVpcPeering) IsSet() bool {
	return v.isSet
}

func (v *NullableKawaiiVpcPeering) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKawaiiVpcPeering(val *KawaiiVpcPeering) *NullableKawaiiVpcPeering {
	return &NullableKawaiiVpcPeering{value: val, isSet: true}
}

func (v NullableKawaiiVpcPeering) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKawaiiVpcPeering) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


