/*
Kowabunga API

Kvm Orchestrator With A BUNch of Goods Added

API version: 0.53.1
Contact: maintainers@kowabunga.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kowabunga

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the KonveyBackends type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &KonveyBackends{}

// KonveyBackends A Konvey Backends settings.
type KonveyBackends struct {
	// The Konvey (Kowabunga Network Load-Balancer) endpoint list of load-balanced backend hosts.
	Hosts []string `json:"hosts"`
	// The Konvey (Kowabunga Network Load-Balancer) endpoint backend service port.
	Port int64 `json:"port"`
}

type _KonveyBackends KonveyBackends

// NewKonveyBackends instantiates a new KonveyBackends object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKonveyBackends(hosts []string, port int64) *KonveyBackends {
	this := KonveyBackends{}
	this.Hosts = hosts
	this.Port = port
	return &this
}

// NewKonveyBackendsWithDefaults instantiates a new KonveyBackends object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKonveyBackendsWithDefaults() *KonveyBackends {
	this := KonveyBackends{}
	return &this
}

// GetHosts returns the Hosts field value
func (o *KonveyBackends) GetHosts() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Hosts
}

// GetHostsOk returns a tuple with the Hosts field value
// and a boolean to check if the value has been set.
func (o *KonveyBackends) GetHostsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Hosts, true
}

// SetHosts sets field value
func (o *KonveyBackends) SetHosts(v []string) {
	o.Hosts = v
}

// GetPort returns the Port field value
func (o *KonveyBackends) GetPort() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Port
}

// GetPortOk returns a tuple with the Port field value
// and a boolean to check if the value has been set.
func (o *KonveyBackends) GetPortOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Port, true
}

// SetPort sets field value
func (o *KonveyBackends) SetPort(v int64) {
	o.Port = v
}

func (o KonveyBackends) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o KonveyBackends) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["hosts"] = o.Hosts
	toSerialize["port"] = o.Port
	return toSerialize, nil
}

func (o *KonveyBackends) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"hosts",
		"port",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varKonveyBackends := _KonveyBackends{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varKonveyBackends)

	if err != nil {
		return err
	}

	*o = KonveyBackends(varKonveyBackends)

	return err
}

type NullableKonveyBackends struct {
	value *KonveyBackends
	isSet bool
}

func (v NullableKonveyBackends) Get() *KonveyBackends {
	return v.value
}

func (v *NullableKonveyBackends) Set(val *KonveyBackends) {
	v.value = val
	v.isSet = true
}

func (v NullableKonveyBackends) IsSet() bool {
	return v.isSet
}

func (v *NullableKonveyBackends) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKonveyBackends(val *KonveyBackends) *NullableKonveyBackends {
	return &NullableKonveyBackends{value: val, isSet: true}
}

func (v NullableKonveyBackends) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKonveyBackends) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


