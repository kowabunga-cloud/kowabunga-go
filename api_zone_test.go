/*
Kowabunga API documentation

Testing ZoneAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package kowabunga

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	
)

func Test_kowabunga_ZoneAPIService(t *testing.T) {

	configuration := NewConfiguration()
	apiClient := NewAPIClient(configuration)

	t.Run("Test ZoneAPIService CreateKaktus", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var zoneId string

		resp, httpRes, err := apiClient.ZoneAPI.CreateKaktus(context.Background(), zoneId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ZoneAPIService DeleteZone", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var zoneId string

		httpRes, err := apiClient.ZoneAPI.DeleteZone(context.Background(), zoneId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ZoneAPIService ListZoneKaktuses", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var zoneId string

		resp, httpRes, err := apiClient.ZoneAPI.ListZoneKaktuses(context.Background(), zoneId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ZoneAPIService ListZones", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ZoneAPI.ListZones(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ZoneAPIService ReadZone", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var zoneId string

		resp, httpRes, err := apiClient.ZoneAPI.ReadZone(context.Background(), zoneId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ZoneAPIService UpdateZone", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var zoneId string

		resp, httpRes, err := apiClient.ZoneAPI.UpdateZone(context.Background(), zoneId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
