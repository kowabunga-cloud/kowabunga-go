/*
Kowabunga API

Kvm Orchestrator With A BUNch of Goods Added

API version: 0.53.1
Contact: maintainers@kowabunga.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kowabunga

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Project type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Project{}

// Project A Kowabunga project corresponds to a single tenant, isolated set of resources.
type Project struct {
	// The project ID (auto-generated).
	Id *string `json:"id,omitempty"`
	// The project name.
	Name string `json:"name"`
	// The project description.
	Description *string `json:"description,omitempty"`
	// Internal domain name (e.g. myproject.acme.com).
	Domain *string `json:"domain,omitempty"`
	// Default root password, set at cloud-init instance bootstrap phase. Will be randomly auto-generated at each instance creation if unspecified.
	RootPassword *string `json:"root_password,omitempty"`
	// Default service user name, created at cloud-init instance bootstrap phase. Will use Kowabunga's default configuration one if unspecified.
	BootstrapUser *string `json:"bootstrap_user,omitempty"`
	// Default public SSH key, to be associated to bootstrap user. Will use Kowabunga's default configuration one if unspecified.
	BootstrapPubkey *string `json:"bootstrap_pubkey,omitempty"`
	// A list of tags to be associated to the project.
	Tags []string `json:"tags,omitempty"`
	// A list of metadata to be associated to the project.
	Metadatas []Metadata `json:"metadatas,omitempty"`
	Quotas *ProjectResources `json:"quotas,omitempty"`
	// The assigned project VPC private subnets IDs (read-only).
	PrivateSubnets []RegionSubnet `json:"private_subnets,omitempty"`
	// The list of VRRP IDs used by -as-a-service resources within the project virtual network (read-only). Should your application use VRRP for service redundancy, you should use different IDs to prevent issues..
	ReservedVrrpIds []int32 `json:"reserved_vrrp_ids,omitempty"`
	// A list of user teams allowed to administrate the project (i.e. capable of managing internal resources).
	Teams []string `json:"teams"`
	// A list of Kowabunga regions the project is managing resources from.
	Regions []string `json:"regions"`
}

type _Project Project

// NewProject instantiates a new Project object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProject(name string, teams []string, regions []string) *Project {
	this := Project{}
	this.Name = name
	this.Teams = teams
	this.Regions = regions
	return &this
}

// NewProjectWithDefaults instantiates a new Project object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProjectWithDefaults() *Project {
	this := Project{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Project) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Project) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Project) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Project) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value
func (o *Project) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Project) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Project) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *Project) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Project) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *Project) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *Project) SetDescription(v string) {
	o.Description = &v
}

// GetDomain returns the Domain field value if set, zero value otherwise.
func (o *Project) GetDomain() string {
	if o == nil || IsNil(o.Domain) {
		var ret string
		return ret
	}
	return *o.Domain
}

// GetDomainOk returns a tuple with the Domain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Project) GetDomainOk() (*string, bool) {
	if o == nil || IsNil(o.Domain) {
		return nil, false
	}
	return o.Domain, true
}

// HasDomain returns a boolean if a field has been set.
func (o *Project) HasDomain() bool {
	if o != nil && !IsNil(o.Domain) {
		return true
	}

	return false
}

// SetDomain gets a reference to the given string and assigns it to the Domain field.
func (o *Project) SetDomain(v string) {
	o.Domain = &v
}

// GetRootPassword returns the RootPassword field value if set, zero value otherwise.
func (o *Project) GetRootPassword() string {
	if o == nil || IsNil(o.RootPassword) {
		var ret string
		return ret
	}
	return *o.RootPassword
}

// GetRootPasswordOk returns a tuple with the RootPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Project) GetRootPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.RootPassword) {
		return nil, false
	}
	return o.RootPassword, true
}

// HasRootPassword returns a boolean if a field has been set.
func (o *Project) HasRootPassword() bool {
	if o != nil && !IsNil(o.RootPassword) {
		return true
	}

	return false
}

// SetRootPassword gets a reference to the given string and assigns it to the RootPassword field.
func (o *Project) SetRootPassword(v string) {
	o.RootPassword = &v
}

// GetBootstrapUser returns the BootstrapUser field value if set, zero value otherwise.
func (o *Project) GetBootstrapUser() string {
	if o == nil || IsNil(o.BootstrapUser) {
		var ret string
		return ret
	}
	return *o.BootstrapUser
}

// GetBootstrapUserOk returns a tuple with the BootstrapUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Project) GetBootstrapUserOk() (*string, bool) {
	if o == nil || IsNil(o.BootstrapUser) {
		return nil, false
	}
	return o.BootstrapUser, true
}

// HasBootstrapUser returns a boolean if a field has been set.
func (o *Project) HasBootstrapUser() bool {
	if o != nil && !IsNil(o.BootstrapUser) {
		return true
	}

	return false
}

// SetBootstrapUser gets a reference to the given string and assigns it to the BootstrapUser field.
func (o *Project) SetBootstrapUser(v string) {
	o.BootstrapUser = &v
}

// GetBootstrapPubkey returns the BootstrapPubkey field value if set, zero value otherwise.
func (o *Project) GetBootstrapPubkey() string {
	if o == nil || IsNil(o.BootstrapPubkey) {
		var ret string
		return ret
	}
	return *o.BootstrapPubkey
}

// GetBootstrapPubkeyOk returns a tuple with the BootstrapPubkey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Project) GetBootstrapPubkeyOk() (*string, bool) {
	if o == nil || IsNil(o.BootstrapPubkey) {
		return nil, false
	}
	return o.BootstrapPubkey, true
}

// HasBootstrapPubkey returns a boolean if a field has been set.
func (o *Project) HasBootstrapPubkey() bool {
	if o != nil && !IsNil(o.BootstrapPubkey) {
		return true
	}

	return false
}

// SetBootstrapPubkey gets a reference to the given string and assigns it to the BootstrapPubkey field.
func (o *Project) SetBootstrapPubkey(v string) {
	o.BootstrapPubkey = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *Project) GetTags() []string {
	if o == nil || IsNil(o.Tags) {
		var ret []string
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Project) GetTagsOk() ([]string, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *Project) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *Project) SetTags(v []string) {
	o.Tags = v
}

// GetMetadatas returns the Metadatas field value if set, zero value otherwise.
func (o *Project) GetMetadatas() []Metadata {
	if o == nil || IsNil(o.Metadatas) {
		var ret []Metadata
		return ret
	}
	return o.Metadatas
}

// GetMetadatasOk returns a tuple with the Metadatas field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Project) GetMetadatasOk() ([]Metadata, bool) {
	if o == nil || IsNil(o.Metadatas) {
		return nil, false
	}
	return o.Metadatas, true
}

// HasMetadatas returns a boolean if a field has been set.
func (o *Project) HasMetadatas() bool {
	if o != nil && !IsNil(o.Metadatas) {
		return true
	}

	return false
}

// SetMetadatas gets a reference to the given []Metadata and assigns it to the Metadatas field.
func (o *Project) SetMetadatas(v []Metadata) {
	o.Metadatas = v
}

// GetQuotas returns the Quotas field value if set, zero value otherwise.
func (o *Project) GetQuotas() ProjectResources {
	if o == nil || IsNil(o.Quotas) {
		var ret ProjectResources
		return ret
	}
	return *o.Quotas
}

// GetQuotasOk returns a tuple with the Quotas field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Project) GetQuotasOk() (*ProjectResources, bool) {
	if o == nil || IsNil(o.Quotas) {
		return nil, false
	}
	return o.Quotas, true
}

// HasQuotas returns a boolean if a field has been set.
func (o *Project) HasQuotas() bool {
	if o != nil && !IsNil(o.Quotas) {
		return true
	}

	return false
}

// SetQuotas gets a reference to the given ProjectResources and assigns it to the Quotas field.
func (o *Project) SetQuotas(v ProjectResources) {
	o.Quotas = &v
}

// GetPrivateSubnets returns the PrivateSubnets field value if set, zero value otherwise.
func (o *Project) GetPrivateSubnets() []RegionSubnet {
	if o == nil || IsNil(o.PrivateSubnets) {
		var ret []RegionSubnet
		return ret
	}
	return o.PrivateSubnets
}

// GetPrivateSubnetsOk returns a tuple with the PrivateSubnets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Project) GetPrivateSubnetsOk() ([]RegionSubnet, bool) {
	if o == nil || IsNil(o.PrivateSubnets) {
		return nil, false
	}
	return o.PrivateSubnets, true
}

// HasPrivateSubnets returns a boolean if a field has been set.
func (o *Project) HasPrivateSubnets() bool {
	if o != nil && !IsNil(o.PrivateSubnets) {
		return true
	}

	return false
}

// SetPrivateSubnets gets a reference to the given []RegionSubnet and assigns it to the PrivateSubnets field.
func (o *Project) SetPrivateSubnets(v []RegionSubnet) {
	o.PrivateSubnets = v
}

// GetReservedVrrpIds returns the ReservedVrrpIds field value if set, zero value otherwise.
func (o *Project) GetReservedVrrpIds() []int32 {
	if o == nil || IsNil(o.ReservedVrrpIds) {
		var ret []int32
		return ret
	}
	return o.ReservedVrrpIds
}

// GetReservedVrrpIdsOk returns a tuple with the ReservedVrrpIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Project) GetReservedVrrpIdsOk() ([]int32, bool) {
	if o == nil || IsNil(o.ReservedVrrpIds) {
		return nil, false
	}
	return o.ReservedVrrpIds, true
}

// HasReservedVrrpIds returns a boolean if a field has been set.
func (o *Project) HasReservedVrrpIds() bool {
	if o != nil && !IsNil(o.ReservedVrrpIds) {
		return true
	}

	return false
}

// SetReservedVrrpIds gets a reference to the given []int32 and assigns it to the ReservedVrrpIds field.
func (o *Project) SetReservedVrrpIds(v []int32) {
	o.ReservedVrrpIds = v
}

// GetTeams returns the Teams field value
func (o *Project) GetTeams() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Teams
}

// GetTeamsOk returns a tuple with the Teams field value
// and a boolean to check if the value has been set.
func (o *Project) GetTeamsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Teams, true
}

// SetTeams sets field value
func (o *Project) SetTeams(v []string) {
	o.Teams = v
}

// GetRegions returns the Regions field value
func (o *Project) GetRegions() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Regions
}

// GetRegionsOk returns a tuple with the Regions field value
// and a boolean to check if the value has been set.
func (o *Project) GetRegionsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Regions, true
}

// SetRegions sets field value
func (o *Project) SetRegions(v []string) {
	o.Regions = v
}

func (o Project) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Project) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["name"] = o.Name
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Domain) {
		toSerialize["domain"] = o.Domain
	}
	if !IsNil(o.RootPassword) {
		toSerialize["root_password"] = o.RootPassword
	}
	if !IsNil(o.BootstrapUser) {
		toSerialize["bootstrap_user"] = o.BootstrapUser
	}
	if !IsNil(o.BootstrapPubkey) {
		toSerialize["bootstrap_pubkey"] = o.BootstrapPubkey
	}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	if !IsNil(o.Metadatas) {
		toSerialize["metadatas"] = o.Metadatas
	}
	if !IsNil(o.Quotas) {
		toSerialize["quotas"] = o.Quotas
	}
	if !IsNil(o.PrivateSubnets) {
		toSerialize["private_subnets"] = o.PrivateSubnets
	}
	if !IsNil(o.ReservedVrrpIds) {
		toSerialize["reserved_vrrp_ids"] = o.ReservedVrrpIds
	}
	toSerialize["teams"] = o.Teams
	toSerialize["regions"] = o.Regions
	return toSerialize, nil
}

func (o *Project) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"teams",
		"regions",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varProject := _Project{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varProject)

	if err != nil {
		return err
	}

	*o = Project(varProject)

	return err
}

type NullableProject struct {
	value *Project
	isSet bool
}

func (v NullableProject) Get() *Project {
	return v.value
}

func (v *NullableProject) Set(val *Project) {
	v.value = val
	v.isSet = true
}

func (v NullableProject) IsSet() bool {
	return v.isSet
}

func (v *NullableProject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProject(val *Project) *NullableProject {
	return &NullableProject{value: val, isSet: true}
}

func (v NullableProject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


